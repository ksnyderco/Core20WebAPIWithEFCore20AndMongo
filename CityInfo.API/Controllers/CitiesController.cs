using CityInfo.API.Entities;
using CityInfo.API.Models;
using CityInfo.API.Services;
using Microsoft.AspNetCore.JsonPatch;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System.Collections.Generic;
using System.Linq;

namespace CityInfo.API.Controllers
{
    [Route("api/cities")]
    public class CitiesController : Controller
    {
        private ICityInfoRepository _cityInfoRepository;
        private IMongoRepository _mongoRepository;
        private ILogger<CitiesController> _logger;
        private IMailService _mailService;


        public CitiesController(ICityInfoRepository cityInfoRepository, IMongoRepository mongoRepository, ILogger<CitiesController> logger, IMailService mailService)
        {
            _cityInfoRepository = cityInfoRepository;
            _mongoRepository = mongoRepository;
            _logger = logger;
            _mailService = mailService;
        }

        #region ENTITY FRAMEWORK

        [HttpGet()] //uses api/cities route
        public IActionResult GetCities()
        {
            //hardcoded data
            //return Ok(CitiesDataStore.Current.Cities);

            //get entities from EF
            var cityEntities = _cityInfoRepository.GetCities();

            //convert entities to dtos
            var results = new List<CityDto>();
            foreach(var cityEntity in cityEntities)
            {
                results.Add(new CityDto
                {
                    Id = cityEntity.Id,
                    Name = cityEntity.Name,
                    Description = cityEntity.Description
                });
            }

            return Ok(results);
        }

        [HttpGet("{id}", Name ="GetCity")] //uses api/cities/{id} route
        public IActionResult GetCity(int id)
        {
            //hardcoded data
            //var cityToReturn = CitiesDataStore.Current.Cities.FirstOrDefault(c => c.Id == id);
            //if (cityToReturn == null)
            //    return NotFound();

            //return Ok(cityToReturn);

            //get entities from EF
            var city = _cityInfoRepository.GetCity(id);
            if (city == null)
            {
                _logger.LogInformation($"City with id {id} was not found.");
                return NotFound();
            }

            //convert entities to dtos
            var cityResult = new CityDto
            {
                Id = city.Id,
                Name = city.Name,
                Description = city.Description
            };

            return Ok(cityResult);
        }

        [HttpPost()]
        public IActionResult CreateCity([FromBody] CityForCreationDto city)
        {
            //the new city is in the POST body with no id (which is generated by SQL)

            if (city == null)
                return BadRequest();

            //add custom validation before checking data annotation rules
            if (city.Name == city.Description)
                ModelState.AddModelError("Description", "The provided description must be different than the name.");

            //validate data annotations on the model, returning error messages in the response
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            //begin hardcoded data
            ////create a new city and add it to the collection
            //var maxCityId = CitiesDataStore.Current.Cities.Max(c => c.Id);

            //var cityDto = new CityDto
            //{
            //    Id = ++maxCityId, //make a fake new id
            //    Name = city.Name,
            //    Description = city.Description
            //};

            //CitiesDataStore.Current.Cities.Add(cityDto);
            //end hardcoded data

            //create a new entity
            var cityEntity = new City
            {
                Name = city.Name,
                Description = city.Description
            };

            //add entity and save to db
            _cityInfoRepository.AddCity(cityEntity);
            if (!_cityInfoRepository.Save())
            {
                return StatusCode(500, "A problem happened while handling your request.");
            }

            //map entity to dto (method must return a dto, not an entity)
            var cityDto = new CityDto
            {
                Id = cityEntity.Id, //save populated Id identity property
                Name = cityEntity.Name,
                Description = cityEntity.Description
            };

            //return a 201 
            //named route and parameters to get new City are used to build a url in the Location response header
            //the City just created will be in response body
            return CreatedAtRoute("GetCity", new { id = cityDto.Id }, cityDto);
        }

        [HttpPut("{id}")]
        public IActionResult UpdateCity(int id, [FromBody] CityForUpdateDto city)
        {
            //PUT updates all properties.  Properties not passed in will use their default values (strings will be null, etc)

            if (city == null)
                return BadRequest();

            //add custom validation before checking data annotation rules
            if (city.Name == city.Description)
                ModelState.AddModelError("Description", "The provided description must be different than the name.");

            //validate data annotations on the model, returning error messages in the response
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            //begin hardcoded data
            ////find the city
            //var cityFromStore = CitiesDataStore.Current.Cities.FirstOrDefault(c => c.Id == id);
            //if (cityFromStore == null)
            //    return NotFound();

            ////update the city
            //cityFromStore.Name = city.Name;
            //cityFromStore.Description = city.Description;
            //end hardcoded data

            //get entity to update
            var cityEntity = _cityInfoRepository.GetCity(id);
            if (cityEntity == null)
                return NotFound();

            //update the entity
            cityEntity.Name = city.Name;
            cityEntity.Description = city.Description;

            //save the updated entity
            if (!_cityInfoRepository.Save())
            {
                return StatusCode(500, "A problem happened while handling your request.");
            }

            //return a 204
            return NoContent();
        }

        [HttpPatch("{id}")]
        public IActionResult PartiallyUpdateCity(int id, [FromBody] JsonPatchDocument<CityForUpdateDto> patchDoc)
        {
            //PATCH modifies properties as specified in the patchDoc.  Properties not in the patchDoc will not be changed.
            //Reuse the UpdateDto to include the same validation rules used for PUT

            //JSON PATCH SPEC https://tools.ietf.org/html/rfc6902
            /*
             * [
             *  {
             *      "op": "replace",
             *      "path": "/name",
             *      "value": "new name"
             *  }
             * ]
            */

            if (patchDoc == null)
                return BadRequest();

            //begin hardcoded data
            ////find the city
            //var cityFromStore = CitiesDataStore.Current.Cities.FirstOrDefault(c => c.Id == id);
            //if (cityFromStore == null)
            //    return NotFound();

            ////create a new object (copy the existing city) 
            //var cityToPatch = new CityForUpdateDto
            //{
            //    Name = cityFromStore.Name,
            //    Description = cityFromStore.Description
            //};

            ////apply the patch document passed in to the new object.  Pass in ModelState to capture any errors during patching.
            //patchDoc.ApplyTo(cityToPatch, ModelState);

            ////check for errors when applying the patch.  This ModelState is looking at the patchDoc, not the CityForUpdateDto
            //if (!ModelState.IsValid)
            //    return BadRequest(ModelState);

            ////validate the CityForUpdateDto is valid
            //if (cityToPatch.Name == cityToPatch.Description)
            //    ModelState.AddModelError("Description", "The provided description must be different than the name.");

            ////run the model validation rules
            //TryValidateModel(cityToPatch);

            //if (!ModelState.IsValid)
            //    return BadRequest(ModelState);

            ////update the city with the new data
            //cityFromStore.Name = cityToPatch.Name;
            //cityFromStore.Description = cityToPatch.Description;
            //end hardcoded data

            //find the city
            var cityEntity = _cityInfoRepository.GetCity(id);
            if (cityEntity == null)
                return NotFound();

            //create a new dto to apply the patch to (copy the existing city entity) 
            var cityToPatch = new CityForUpdateDto
            {
                Name = cityEntity.Name,
                Description = cityEntity.Description
            };

            //apply the patch document passed in to the new object.  Pass in ModelState to capture any errors during patching.
            patchDoc.ApplyTo(cityToPatch, ModelState);

            //check for errors when applying the patch.  This ModelState is looking at the patchDoc, not the CityForUpdateDto
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            //validate the CityForUpdateDto is valid
            if (cityToPatch.Name == cityToPatch.Description)
                ModelState.AddModelError("Description", "The provided description must be different than the name.");

            //run the model validation rules
            TryValidateModel(cityToPatch);

            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            //update the city with the new data
            cityEntity.Name = cityToPatch.Name;
            cityEntity.Description = cityToPatch.Description;

            //save the updated entity
            if (!_cityInfoRepository.Save())
            {
                return StatusCode(500, "A problem happened while handling your request.");
            }

            //return a 204
            return NoContent();
        }

        [HttpDelete("{id}")]
        public IActionResult DeleteCity(int id)
        {
            //begin hardcoded data
            ////find the city
            //var cityFromStore = CitiesDataStore.Current.Cities.FirstOrDefault(c => c.Id == id);
            //if (cityFromStore == null)
            //    return NotFound();

            ////remove the city
            //CitiesDataStore.Current.Cities.Remove(cityFromStore);
            //end hardcoded data

            //find the city
            var cityEntity = _cityInfoRepository.GetCity(id);
            if (cityEntity == null)
                return NotFound();

            //remove the city
            _cityInfoRepository.DeleteCity(cityEntity);
            if (!_cityInfoRepository.Save())
            {
                return StatusCode(500, "A problem happened while handling your request.");
            }

            //send a fake email using a custom service
            _mailService.Send("City deleted", $"City {cityEntity.Name} with id {cityEntity.Id} was deleted.");

            //return a 204
            return NoContent();
        }

        #endregion


        #region MONGO

        [HttpGet("mongo")] //uses api/cities/mongo route
        public IActionResult GetCitiesMongo()
        {
            //get entities from Mongo
            var cityEntities = _mongoRepository.GetCities();

            //convert entities to dtos
            var results = new List<CityDto>();
            foreach (var cityEntity in cityEntities)
            {
                results.Add(new CityDto
                {
                    Id = cityEntity.Id,
                    Name = cityEntity.Name,
                    Description = cityEntity.Description
                });
            }

            return Ok(results);
        }

        [HttpGet("mongo/{id}")] //uses api/cities/mongo/{id} route
        public IActionResult GetCityMongo(int id)
        {
            //get entities from Mongo
            var city = _mongoRepository.GetCity(id);
            if (city == null)
                return NotFound();

            //convert entities to dtos
            var cityResult = new CityDto
            {
                Id = city.Id,
                Name = city.Name,
                Description = city.Description
            };

            return Ok(cityResult);
        }

        #endregion
    }
}
